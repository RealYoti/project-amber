https://github.com/RealYoti/h-encore
https://github.com/RealYoti/gamecard-microsd
diff --git a/bootstrap/bootstrap.c b/bootstrap/bootstrap.c
index eb62117..430f3db 100644
--- a/bootstrap/bootstrap.c
+++ b/bootstrap/bootstrap.c
@@ -10,14 +10,15 @@
 #include "pspdebug.h"
 
 #define WHITE 0xFFFFFFFF
-#define RED   0xFF0000FF
+#define AMBER 0xFF00BFFF
 
 #define printf psvDebugScreenPrintf
 
-#define VITASHELL_BASE_ADDRESS "https://raw.githubusercontent.com/RealYoti/VitaShell/master/release"
+#define VITASHELL_BASE_ADDRESS "http://vitawiki.xyz/release"
 
 #define INCLUDE_EXTERN_RESOURCE(name) extern unsigned char _binary_res_##name##_start; extern unsigned char _binary_res_##name##_size; \
 
+INCLUDE_EXTERN_RESOURCE(gamesd_skprx);
 INCLUDE_EXTERN_RESOURCE(taihen_skprx);
 INCLUDE_EXTERN_RESOURCE(henkaku_skprx);
 INCLUDE_EXTERN_RESOURCE(henkaku_suprx);
@@ -43,11 +44,25 @@ const char taihen_config[] =
   "# this is for modifying the version string in settings widget\n"
   "ur0:tai/henkaku.suprx\n";
 
+const char taihen_config_gamesd[] =
+  "*KERNEL\n"
+  "# henkaku.skprx is hard-coded to load and is not listed here\n"
+  "ur0:tai/gamesd.skprx\n"
+  "*main\n"
+  "# main is a special titleid for SceShell\n"
+  "ur0:tai/henkaku.suprx\n"
+  "*NPXS10015\n"
+  "# this is for modifying the version string\n"
+  "ur0:tai/henkaku.suprx\n"
+  "*NPXS10016\n"
+  "# this is for modifying the version string in settings widget\n"
+  "ur0:tai/henkaku.suprx\n";
+
 enum Items {
   EXIT,
   INSTALL_HENKAKU,
   DOWNLOAD_VITASHELL,
-  PERSONALIZE_SAVEDATA,
+  INSTALL_SD2VITA_PRX,
   RESET_TAIHEN_CONFIG
 };
 
@@ -55,7 +70,7 @@ const char *items[] = {
   "Exit",
   "Install HENkaku",
   "Download VitaShell",
-  "Personalize savedata",
+  "Install SD2VITA as ux0",
   "Reset taiHEN config.txt"
 };
 
@@ -353,7 +368,7 @@ int install_henkaku() {
   return 0;
 }
 
-int write_taihen_config(const char *path, int recovery) {
+int write_taihen_config(const char *path, int recovery, int gamesd) {
   int fd;
 
   // write default config
@@ -363,42 +378,36 @@ int write_taihen_config(const char *path, int recovery) {
     sceIoWrite(fd, taihen_config_recovery_header, sizeof(taihen_config_recovery_header) - 1);
   }
   sceIoWrite(fd, taihen_config_header, sizeof(taihen_config_header) - 1);
-  sceIoWrite(fd, taihen_config, sizeof(taihen_config) - 1);
+  if (gamesd) {
+    sceIoWrite(fd, taihen_config_gamesd, sizeof(taihen_config_gamesd) - 1);
+  } else {
+    sceIoWrite(fd, taihen_config, sizeof(taihen_config) - 1);
+  }
   sceIoClose(fd);
 
   return 0;
 }
 
-int reset_taihen_config() {
-  sceIoMkdir("ux0:tai", 6);
-  sceIoMkdir("ur0:tai", 6);
-
-  write_taihen_config("ux0:tai/config.txt", 0);
-  write_taihen_config("ur0:tai/config.txt", 1);
-
-  return 0;
-}
-
-int personalize_savedata(int syscall_id) {
+int install_gamesd() {
   int res;
-  int fd;
-  uint64_t aid;
 
-  res = call_syscall(sceKernelGetProcessId(), 0, 0, syscall_id + 4);
-  if (res < 0 && res != 0x80800003)
-    return res;
+  sceIoMkdir("ur0:tai", 6);
 
-  res = sceRegMgrGetKeyBin("/CONFIG/NP", "account_id", &aid, sizeof(uint64_t));
+  write_taihen_config("ur0:tai/config.txt", 1, 1);
+
+  res = write_file("ur0:tai/gamesd.skprx", (void *)&_binary_res_gamesd_skprx_start, (int)&_binary_res_gamesd_skprx_size);
   if (res < 0)
     return res;
 
-  fd = sceIoOpen("savedata0:sce_sys/param.sfo", SCE_O_RDWR, 0777);
-  if (fd < 0)
-    return fd;
+  return 0;
+}
 
-  sceIoLseek(fd, 0xe4, SCE_SEEK_SET);
-  sceIoWrite(fd, &aid, sizeof(uint64_t));
-  sceIoClose(fd);
+int reset_taihen_config() {
+  sceIoMkdir("ux0:tai", 6);
+  sceIoMkdir("ur0:tai", 6);
+
+  write_taihen_config("ux0:tai/config.txt", 0, 0);
+  write_taihen_config("ur0:tai/config.txt", 1, 0);
 
   return 0;
 }
@@ -450,17 +459,17 @@ int print_menu(int sel) {
   int i;
 
   psvDebugScreenSetXY(0, 0);
-  psvDebugScreenSetTextColor(RED);
-  printf("\n h-encore bootstrap menu\n\n");
+  psvDebugScreenSetTextColor(AMBER);
+  printf("\n HENlo bootstrap menu\n\n");
 
   for (i = 0; i < N_ITEMS; i++) {
-    psvDebugScreenSetTextColor(sel == i ? RED : WHITE);
+    psvDebugScreenSetTextColor(sel == i ? AMBER : WHITE);
     printf(" [%c] %s\n", sel == i ? '*' : ' ', items[i]);
   }
 
   printf("\n");
 
-  psvDebugScreenSetTextColor(RED);
+  psvDebugScreenSetTextColor(AMBER);
   printf("----------------------------\n\n");
 
   return 0;
@@ -518,7 +527,7 @@ int module_start(SceSize args, void *argp) {
 
     if ((enter_cross && pressed_buttons & SCE_CTRL_CROSS) ||
         (!enter_cross && pressed_buttons & SCE_CTRL_CIRCLE)) {
-      psvDebugScreenSetTextColor(RED);
+      psvDebugScreenSetTextColor(AMBER);
 
       if (sel == EXIT) {
         printf(" > Exiting...\n");
@@ -532,10 +541,10 @@ int module_start(SceSize args, void *argp) {
         printf(" > Downloading VitaShell...\n");
         sceKernelDelayThread(500 * 1000);
         res = download_vitashell();
-      } else if (sel == PERSONALIZE_SAVEDATA) {
-        printf(" > Personalizing savedata...\n");
+      } else if (sel == INSTALL_SD2VITA_PRX) {
+        printf(" > Installing SD2VITA...\n");
         sceKernelDelayThread(500 * 1000);
-        res = personalize_savedata(syscall_id);
+        res = install_gamesd(syscall_id);
       } else if (sel == RESET_TAIHEN_CONFIG) {
         if (wait_confirm(" > Are you sure you want to reset taiHEN config.txt?\n")) {
           printf(" > Resetting taiHEN config.txt...\n");
